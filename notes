python -m referee agent agent

python -m referee <red module> <blue module>

COMMENT: ASDF

### NOTES
- i want to be able to have the algorithm know the spread action. like, how itll verify the move. ik how to do it manually but how do i do it  with the referee in mind?
- find a way to copy the entire board as it is
- how to ensure non-illegal moves? we do the logic ourselves? i think we use the exceptions but not too sure how to run those without returning a modification to the board
- playout policy could be doing semi-random moves(?) definitely not ideal but idk how we'd decide which moves are best
- does my board spawn something (ie at power >49) when the referee wont? will it reflect??

### OPTIMISATIONS
- after a certain amount of tokens on board, do spread actions only???
- maybe the first like 40 turns should be fairly simple random things
- try to get like, 20 pieces on the board? something to maximise number of pieces. Prioritise moves that eat other pieces. Give a higher reward for eating other pieces(?) or maximising the difference of power
- try to spread to pieces with high power
- add least Amount of Turns to Win to the Utility??

### TO FIX
- it will spawn things even after board max has been reached. should not allow it to spawn more if
====================================ITERATION 275====================================
None
{'time_remaining': None, 'space_remaining': None, 'space_limit': 2.0}
* referee : RED plays action SPAWN(4, 6)
* referee ! player error: ILLEGAL ACTION: Total board power max reached (49)
* referee : game over, winner is BLUE
* referee @ result: player 2 [agent:Agent]
PS C:\Users\agust\OneDrive\Documents\GitHub\COMP30024-Project-2>


### USEFUL CODE
- "HexPos(r,q).__add__(HexDir.Location)" returns the Hex of neighbours. I think this includes mapping as well
    - could be used on GetNeighbours